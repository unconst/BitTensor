./Emission testing.ipynb:119:    "        # TODO(const): It is not yet obvious if tokens that are held out of the metagraph should be attaining emission.\n",
./Emission testing.ipynb:191:    "        # TODO(const): I am uncertain of the EOS token requirements this function requires, or what happens whena \n",
./contract/bittensor/bittensor.cpp:24:    // TODO(const): We need to sub the balance from the bittensor pool
./contract/bittensor/bittensor.cpp:69:    // TODO(const): We need to add the balance back into the bittensor pool
./contract/bittensor/bittensor.cpp:210:  // TODO(const): This should be done in a way that keeps the precision of the
./docs/links.txt:8:# TODO (const): Outrageously large NNs Shazeer
./docs/links.txt:9:# TODO (const): Multitask learning Gomez
./docs/links.txt:10:# TODO (const): AHAH computing
./docs/links.txt:11:# TODO (const): distillation
./docs/links.txt:12:# TODO (const): Fishers information pruning
./docs/links.txt:13:# TODO (const): Catastrophic forgetting.
./docs/links.txt:14:# TODO (const): Bitcoin & Ethereum & EOS
./docs/links.txt:15:# TODO (const): IPFS, BitTorrent
./.gitignore:3:# TODO(const) This folder should be set with a var.
./scripts/TODO.txt:1:./bittensor.sh:101:  # TODO(const) In the future this could be preset and contain our conf file.
./scripts/TODO.txt:2:./bittensor.sh:117:  # TODO(const) These are currently hard coded to eosio main. In prodution this
./scripts/TODO.txt:3:./todo.sh:3:grep -rnw . -e 'TODO' > TODO.txt
./scripts/bittensor.sh:101:  # TODO(const) In the future this could be preset and contain our conf file.
./scripts/bittensor.sh:117:  # TODO(const) These are currently hard coded to eosio main. In prodution this
./scripts/todo.sh:1:grep -rnw . -e 'TODO' > TODO.txt
./.ipynb_checkpoints/Emission testing-checkpoint.ipynb:119:    "        # TODO(const): It is not yet obvious if tokens that are held out of the metagraph should be attaining emission.\n",
./.ipynb_checkpoints/Emission testing-checkpoint.ipynb:191:    "        # TODO(const): I am uncertain of the EOS token requirements this function requires, or what happens whena \n",
./src/proto/tensorflow/core/framework/tensor.proto:12:  // Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
./src/nucleus.py:96:        # TODO(const) Add distillation networks for each dendrite.
./src/nucleus.py:140:        # TODO(const) implement distillation pipeline here. During inference this should be run through the distilled network.
./src/nucleus.py:173:        # TODO(const) More than one layer?
./src/nucleus.py:295:        # TODO(const): Attribution scores should be posted to tensorboard
./src/nucleus.py:311:                    # TODO(const) Problematic! This is not thead safe.
./src/nucleus.py:381:                # TODO(const) Need to implement the validation loop here.
./src/metagraph.py:45:# TODO (const): Pull Token supply.
./src/metagraph.py:46:# TODO (const): Call Token Emit.
./src/metagraph.py:47:# TODO (const): Calculate attribution derivatives for synapse prunning.
./src/metagraph.py:56:        # TODO(const) this should be our own key. NOT EOSMAIN.
./src/metagraph.py:62:    # TODO(const): pull this from the eos chain under the var 'total stake'
./src/metagraph.py:75:    # # TODO(const): set attributions.
./src/metagraph.py:79:    # # TODO(const): refresh graph.
./src/metagraph.py:84:    # # TODO(const): emit token.
./src/metagraph.py:89:    # # TODO(const): subscribe neuron.
./src/metagraph.py:94:    # # TODO(const): unsubscribe neuron.
./src/metagraph.py:104:            # TODO (const) Rewrite the cleos library for our selves.
./src/synapse.py:7:# TODO (const): Rate limit and block ip.
./src/synapse.py:71:        # TODO (const) The synapse should be competitively selecting which nodes
./src/main.py:37:    # TODO(const) perhaps this should be removed. Instead downstream state is
./src/main.py:45:    # TODO(const) Use Hparams and FLAGS like in ARC nets.
./src/main.py:59:    # TODO(const) Market driven bidding for neighbors with FAN-IN K value.
./src/dendrite.py:18:# TODO (const): Negotiate channels with upstream nodes.
./src/dendrite.py:65:        # TODO(const) Implement distillation here for inference.
./src/dendrite.py:66:        # TODO(const) Implement sub networks for each dendrite.
./src/dendrite.py:75:        # TODO(const) Currently this function is syncronous. Calls to the
./src/dendrite.py:101:            # TODO(const) This should be a special tf.operation.
